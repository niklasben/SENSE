<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="xsl/oai2.xsl"?><OAI-PMH xmlns="http://www.openarchives.org/OAI/2.0/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/ http://www.openarchives.org/OAI/2.0/OAI-PMH.xsd">
  <responseDate>2014-10-15T06:53:13Z</responseDate>
  <request verb="GetRecord" metadataPrefix="oai_dc" identifier="oai:kobv.de-opus4-tuberlin:1951">http://opus4.kobv.de/opus4-tuberlin/oai</request>
  <GetRecord>
    <record>
      <header>
        <identifier>oai:kobv.de-opus4-tuberlin:1951</identifier>
        <datestamp>2013-07-01</datestamp>
        <setSpec>doc-type:doctoralthesis</setSpec>
        <setSpec>bibliography:false</setSpec>
        <setSpec>ddc</setSpec>
        <setSpec>ddc:510</setSpec>
      </header>
      <metadata>
        <oai_dc:dc xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd">
          <dc:title xml:lang="eng">On Partitioned Simulation of Electrical Circuits using Dynamic Iteration Methods</dc:title>
          <dc:title xml:lang="deu">Verteilte Simulation von elektrischen Schaltkreisen mit Hilfe dynamischer Itertionsmethoden</dc:title>
          <dc:creator>Ebert, Falk</dc:creator>
          <dc:subject>ddc:510</dc:subject>
          <dc:description xml:lang="eng">The purpose of this thesis was the analysis of partitioned simulation of electrical circuits. Special emphasis has been put on two points. First, the analytical results should have graph theoretical interpretations. This requirement is based on the fact that the differential-algebraic equations arising in circuit simulation are often very large and badly scaled and do not allow an analysis with standard tools from linear algebra, such as SVD. And secondly, all developed methods shall work with standard circuit simulation tools, such that these methods can easily be included into existing software. The widely used circuit simulation tool SPICE and the corresponding netlist format have been used as reference. Some basic concepts from analysis and linear algebra, together with a brief introduction into the theory of DAEs, graph theory and circuit simulation were given in Chapter 2. The method of choice for the setup of circuit equations was the Modified Nodal Analysis. We have also presented concepts of expressing range, kernel and rank of circuit related matrices with the help of graph structures such as loops and cutsets. In Chapter 3, we have reviewed the basic concepts of Dynamic Iteration methods for the solution of partitioned ODEs and DAEs. For these two types of dynamic systems, the convergence behaviour of the Dynamic Iteration process is fundamentally different. Sufficient criteria for convergence have been presented. While for ODEs, under very weak assumptions, rapid convergence of the method can always be expected, the convergence behaviour of Dynamic Iteration for DAEs depends on the spectral properties of a problem specific matrix. We have mainly restricted our considerations to Dynamic Iteration methods for DAEs of differentiation index one that are coupled in a special way. The block Jacobi and block Gauss-Seidel methods, which are well-known from matrix iterative analysis can easily be extended to the problem of Dynamic Iteration for coupled systems of semi-explicit DAEs. In this case, the convergence criterion becomes easier to check. Also, some approaches for a modified Dynamic Iteration method to guarantee convergence for semi-explicit DAEs with the block Jacobi and block Gauss-Seidel methods have been proposed. In Chapter 4, these results were applied to the task of partitioned circuit simulation. We have first presented an overlap-free splitting technique that allows an interpretation of the split circuit equations as circuit netlist. For the analysis of Dynamic Iteration methods for circuits, we only allow resistive, capacitive and inductive elements as well as independent sources. This restriction was necessary for a concise characterization of convergence behaviour. We have first investigated the convergence behaviour for purely resistive circuits and shown how the freedom in the splitting of the circuit influences the speed of convergence. However, it was not possible to construct a convergent method for all cases in this way. We have then extended the obtained results to RCL circuits. It was possible to show that these circuits can be analyzed using the results from the resistive case for three specially constructed subcircuits of the RCL circuit. The results for resistive circuits then carry over to the more general RCL case. The problem of nonconvergence was addressed in Section 4.4, where methods have been developed that force or accelerate convergence of the Dynamic Iteration method by extending certain parts of the circuit. The more numerical aspects of Dynamic Iteration were investigated in Chapter 5. For the previous results, it has been assumed that all equations were exactly solvable. In this chapter, we take errors from numerical integration and interpolation of previous solutions into account. We were able to state a convergence result for Dynamic Iteration methods that include these errors. Furthermore, we have investigated the influence of macro step sizes on work load and approximation errors and devised a simple but functional macro step size controller. The obtained results have been validated in Chapter 6 with the help of four examples. The used circuit simulation software is the freely available code SPICE. Concluding, we have shown that the Dynamic Iteration approach is an easy and effective way to simulate different parts of a circuit using different solvers. This may be less efficient than a SPICE simulation of the full circuit. However, in cases where this is not possible, e.g., for the simulation of circuits with PDE device models, Dynamic Iteration becomes very efficient and is easily implemented into existing simulation software environments.</dc:description>
          <dc:description xml:lang="deu">Im Rahmen dieser Arbeit wird die partitionierte Simulation elektrischer Schaltkreise untersucht. Hierbei handelt es sich um eine Technik, verschiedene Teile eines Schaltkreises auf unterschiedliche Weise numerisch zu behandeln um eine Simulation für den Gesamtkreis zu erhalten. Dabei wird besonderes Augenmerk auf zwei Dinge gelegt. Zum einen sollen sämtliche analytischen Resultate eine graphentheoretische Interpretation zulassen. Diese Bedingung resultiert daraus, dass Schaltkreisgleichungen häufig sehr hochdimensional und schlecht skaliert sind und eine Behandlung mit Standardmethoden der linearen Algebra sehr schwierig wird. Die zweite Bedingung ist, dass die erarbeiteten Methoden so formuliert werden, dass sie leicht in existierende Software zur Schaltungssimulation integriert werden können. In dieser Arbeit wird der weitverbreitete Schaltkreissimulator SPICE als Referenzprogramm verwendet. Zunächst werden die benötigten Grundlagen aus der Theorie der differentiell-algebraischen Gleichungen, der Graphentheorie und der Schaltungssimulation vorgestellt. Anschließend wird die Methode der dynamischen Iteration als Mittel zur gekoppelten Simulation partitionierter dynamischer Systeme präsentiert. Dabei wird insbesondere auf die fundamentalen Unterschiede im Konvergenzverhalten zwischen gewöhnlichen Differentialgleichungen und differentiell-algebraischen Gleichungen eingegangen. Es werden hinreichende Konvergenzkriterien für den Fall allgemeiner gekoppelter differentiell-algebraischer Gleichungen erörtert und diese dann für semi-explizite Systeme spezifiziert. Desweiteren werden für diese Systeme modifizierte dynamische Iterationsverfahren vorgeschlagen, welche die Konvergenz des Verfahrens erzwingen und beschleunigen können. Anschließend werden die erbrachten Resultate auf den Spezialfall von partitionierten Schaltungsgleichungen angewandt. Dazu wird zuerst eine Methode vorgestellt, die es ermöglicht, die Schaltkreisgleichungen so zu partitionieren, dass eine elementspezifische Trennung möglich ist und die entstehenden Teilsysteme weiterhin als Schaltkreise interpretiert werden können. Für die Klasse von partitionierten Widerstandsnetzwerken wurden Konvergenzkriterien hergeleitet, die zu großen Teilen auf graphentheoretischen Überlegungen basieren. Desweiteren werden die zuvor vorgestellten Methoden zur Konvergenzbeschleunigung erfolgreich auf Schaltkreise angewandt. Dabei können sämtliche notwendigen Gleichungstransformationen als Modifikationen des Schaltkreises selbst interpretiert werden. Die erhaltenen Resultate für Widerstandsnetzwerke werden dann auf den Fall von partitionierten RCL-Schaltkreisen verallgemeinert. Nach diesen analytischen Betrachtungen werden die Aspekte der numerischen Durchführung von dynamischen Iterationsverfahren erörtert. Dabei wird ein erweitertes Konvergenzkriterium vorgestellt, welches die bei der approximativen Lösung von dynamischen Systemen auftretenden Fehler mit einbezieht. Desweiteren wird der Einfluss von Makroschrittweiten auf die Effizienz des dynamischen Iterationsverfahrens erläutert und eine einfache Schrittweitensteuerung vorgeschlagen. Abschließend werden die gewonnenen theoretischen Erkenntnisse anhand von vier Beispielen verifiziert.</dc:description>
          <dc:date>2008-10-24</dc:date>
          <dc:type>doctoralthesis</dc:type>
          <dc:type>doc-type:doctoralthesis</dc:type>
          <dc:format>application/zip</dc:format>
          <dc:format>application/pdf</dc:format>
          <dc:identifier>http://opus4.kobv.de/opus4-tuberlin/frontdoor/index/index/docId/1951</dc:identifier>
          <dc:identifier>urn:nbn:de:kobv:83-opus-20567</dc:identifier>
          <dc:identifier>http://nbn-resolving.de/urn/resolver.pl?urn:nbn:de:kobv:83-opus-20567</dc:identifier>
          <dc:identifier>http://opus4.kobv.de/opus4-tuberlin/files/1951/original_ebert_falk.zip</dc:identifier>
          <dc:identifier>http://opus4.kobv.de/opus4-tuberlin/files/1951/ebert_falk.pdf</dc:identifier>
          <dc:language>eng</dc:language>
        </oai_dc:dc>
      </metadata>
    </record>
  </GetRecord>
</OAI-PMH>
