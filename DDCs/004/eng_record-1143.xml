<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="xsl/oai2.xsl"?><OAI-PMH xmlns="http://www.openarchives.org/OAI/2.0/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/ http://www.openarchives.org/OAI/2.0/OAI-PMH.xsd">
  <responseDate>2014-10-15T06:49:25Z</responseDate>
  <request verb="GetRecord" metadataPrefix="oai_dc" identifier="oai:kobv.de-opus4-tuberlin:1143">http://opus4.kobv.de/opus4-tuberlin/oai</request>
  <GetRecord>
    <record>
      <header>
        <identifier>oai:kobv.de-opus4-tuberlin:1143</identifier>
        <datestamp>2013-07-01</datestamp>
        <setSpec>doc-type:doctoralthesis</setSpec>
        <setSpec>bibliography:false</setSpec>
        <setSpec>ddc</setSpec>
        <setSpec>ddc:004</setSpec>
      </header>
      <metadata>
        <oai_dc:dc xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd">
          <dc:title xml:lang="eng">Analysis of Compositional Conflicts in Component-Based Systems</dc:title>
          <dc:title xml:lang="deu">Konfliktanalyse bei der Komposition komponentenbasierter Systeme</dc:title>
          <dc:creator>Leicher, Andreas</dc:creator>
          <dc:subject>ddc:004</dc:subject>
          <dc:description xml:lang="eng">Component Based Software Engineering is an emerging discipline that aims at improving software development by means of artifact reuse within a systematically applied construction process. The idea of reuse involves integrating components rather than reinventing and reimplementing existing artifacts. Unfortunately, reuse of existing components is a complex undertaking because of different technologies, different communication forms, and incomplete component specifications. The objective of this work concerns the improvement of component integration by providing extended conflict analysis capabilities, which help to identify mismatches between components that hinder a direct integration. The work defines a Framework for Component Conflict Analysis and Composition that serves as a basis of component integration. The framework is able to handle components of different technologies and it is compatible with a UML-based development process. As a result, it provides the inevitable preparatory work that is required for a semi-automatic connector generation. Contrary to existing approaches, the framework allows analyzing components of different middleware technologies by checking compatibility between their type, behavior, and communication related property specifications. Especially, analysis of required and provided communication properties, which takes the middleware context of components into account is not available in comparable integration frameworks. Components of different technologies cannot be directly compared as they are defined relative to different programming languages, type systems, and middleware technologies. Therefore, the framework is based on a model centric approach within the scope of the Model-Driven Architecture (MDA). Consequently, the framework distinguishes platform independent and platform dependent component specifications. Conflict analysis is based on a platform independent canonical model that represents the least common denominator of components in middleware technologies. Furthermore, the framework provides model transformations that allow abstraction and refinement of components between different abstraction levels. Thereby, the framework supports parametric model transformations as a special feature, which take user requirements into account and result in optimal translations. In order to gain a solution, which is adaptable to different situations and application domains, the framework offers a highly flexible architecture. Consequently, we can integrate new middleware technologies, their type systems as well as additional specification languages into the framework.</dc:description>
          <dc:description xml:lang="deu">Ein Ziel der komponentenbasierten Softwareentwicklung besteht in der Wiederverwendung bereits entwickelter Komponenten zur Verbesserung der Qualität und zur Verminderung der Kosten des Softwareentwicklungsprozesses. Die Wiederverwendung von bestehenden Komponenten erfordert jedoch die sorgfältige Integration in das zu entwickelnde System und wird erschwert durch unterschiedliche Middlewaretechnologien, unterschiedliche Kommunikations- und Interoperationsmechanismen dieser Technologien sowie durch unterschiedliche und zum Teil unvollständige Komponentenspezifikationen. Das grundlegende Ziel dieser Arbeit ist die Unterstützung der Komponentenintegration durch eine ausführliche Konfliktanalyse, welche bestehende Inkompatibilitäten von zu integrierenden Komponenten aufzeigt. Dazu wird ein Framework bereitgestellt, welches es erlaubt, Komponenten unterschiedlicher Technologien im Rahmen eines UML-basierten Entwicklungsprozesses zu prüfen und die (teil-) automatische Generierung von Konnektoren vorzubereiten. Im Gegensatz zu bisherigen Anstäzen ermöglicht dieses Framework die Prüfung von Komponenten unterschiedlicher Middlewaretechnologien in Hinblick auf strukturelle, semantische und kommunikative Differenzen. Insbesondere die Einbeziehung von Kommunikationseigenschaften, welche die von den beteiligten Komponenten verwendeten Kommunikationsmechanismen der zugrundeliegenden Middlewaretechnologien beschreiben, wird zur Zeit von keinem anderen Integrationsframework angeboten. Das vorgestellte Framework basiert auf einem modellzentrierten Ansatz im Rahmen der Model Driven Architecture (MDA). Dies bedeutet, dass sowohl Komponentenspezifikationen auf verschiedenen Ebenen verwaltet werden können als auch dass Modelltransformationen unterstützt werden. Die Konfliktanalyse basiert auf einem kanonischen plattformunabhängigen Komponentenmodell, welches von Plattformspezifika abstrahiert. Komponenten, die auf Grundlage einer speziellen Middlewaretechnologie definiert wurden, werden durch Modelltransformationen in das kanonische Modell abstrahiert. Umgekehrt können jedoch auch plattformunabhängige Komponentenspezifikationen in Spezifikationen spezieller Middlewaretechnologien spezialisiert werden. Als Besonderheit unterstützt das Framework dabei parametrisierbare Modelltransformationen, so dass sich je nach Nutzervorstellungen optimale Transformationen durchführen lassen. Um die Verwendung des Frameworks in unterschiedliche Anwendungsszenarien und -domänen zu ermöglichen, wurde es möglichst flexibel definiert. Somit können sowohl unterschiedliche Middlewaretechnologien und Typsysteme als auch unterschiedliche Spezifikationssprachen in das Framework integriert werden. Zudem können zusätzliche Daten als RDF Statements an beliebige Elemente von Komponenten notiert und über zusätzliche Analyseverfahren ausgewertet werden.</dc:description>
          <dc:date>2005-11-15</dc:date>
          <dc:type>doctoralthesis</dc:type>
          <dc:type>doc-type:doctoralthesis</dc:type>
          <dc:format>application/pdf</dc:format>
          <dc:identifier>http://opus4.kobv.de/opus4-tuberlin/frontdoor/index/index/docId/1143</dc:identifier>
          <dc:identifier>urn:nbn:de:kobv:83-opus-11224</dc:identifier>
          <dc:identifier>http://nbn-resolving.de/urn/resolver.pl?urn:nbn:de:kobv:83-opus-11224</dc:identifier>
          <dc:identifier>http://opus4.kobv.de/opus4-tuberlin/files/1143/leicher_andreas.pdf</dc:identifier>
          <dc:language>eng</dc:language>
          <dc:rights>Deutsches Urheberrecht mit Print on Demand (u.a. für Dissertationen empfohlen)</dc:rights>
        </oai_dc:dc>
      </metadata>
    </record>
  </GetRecord>
</OAI-PMH>
