<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="xsl/oai2.xsl"?><OAI-PMH xmlns="http://www.openarchives.org/OAI/2.0/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/ http://www.openarchives.org/OAI/2.0/OAI-PMH.xsd">
  <responseDate>2014-10-15T06:51:50Z</responseDate>
  <request verb="GetRecord" metadataPrefix="oai_dc" identifier="oai:kobv.de-opus4-tuberlin:1615">http://opus4.kobv.de/opus4-tuberlin/oai</request>
  <GetRecord>
    <record>
      <header>
        <identifier>oai:kobv.de-opus4-tuberlin:1615</identifier>
        <datestamp>2013-07-01</datestamp>
        <setSpec>doc-type:doctoralthesis</setSpec>
        <setSpec>bibliography:false</setSpec>
        <setSpec>ddc</setSpec>
        <setSpec>ddc:004</setSpec>
      </header>
      <metadata>
        <oai_dc:dc xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd">
          <dc:title xml:lang="eng">Tool-supported Refactoring of Aspect-oriented Programs</dc:title>
          <dc:title xml:lang="deu">Werkzeuggest√ºtztes Refactoring von Aspektorientierten Programmen</dc:title>
          <dc:creator>Wloka, Jan</dc:creator>
          <dc:subject>ddc:004</dc:subject>
          <dc:description xml:lang="eng">Aspect-oriented programming offers a new modularization concept for improving the modularity of crosscutting concerns. This concept is mainly realized by an advanced mechanism for composing program behavior, called pointcut and advice. Software evolution of aspect-oriented systems, and particularly software refactoring, has been considered as problematic, because even local changes in the source code can result in unpredictable effects on the behavior of an aspect-oriented program. In a first part of this thesis, we classify general attributes of existing approaches for composing program behavior in AOP and illustrate how each attribute is responsible for the evolution-related problems in the context of refactoring. We conclude that pointcuts specify properties of program representations to capture a certain program behavior, and identify the missing connection between a specification of such a property and the targeted behavior as primary reason for the evolution problems. To overcome these problems, we integrate ideas drawn from the study of automated software refactoring, static change impact analysis, and qualitative program analysis into an impact analysis approach for verifying the validity of pointcuts in aspect-oriented programs. We propose a model for pointcuts that represents every specification of a property of a program representation explicitly by an individual element. Based on this pointcut model a change impact analysis for pointcuts can detect change effects on every specified property, assess how precise a matching element of a program representation is specified, and derive invalidated specifications. The change impact analysis is integrated into a refactoring approach that makes applied changes explicit and uses the impact assessment for an automated computation of pointcut updates. We also present a prototype refactoring tool, called Soothsayer, that implements our refactoring approach. The tool assists the developer in estimating effects on existing aspects, in detecting invalidated pointcuts, and in defining pointcut adjustments. An experimental evaluation of our approach using the tool has validated our expectations.</dc:description>
          <dc:description xml:lang="deu">Aspektorientierte Programmierung (AOP) wurde entwickelt, um insbesondere die Modularit√§t von sogenannten Crosscutting Concerns zu verbessern. AOP stellt einen erweiterten Kompositionsmechanismus zur Verf√ºgung, genannt Pointcut und Advice, mit dem das Verhalten eines Programms zur Laufzeit angepasst werden kann. Ein Entwickler kann mit Hilfe von Pointcuts Eigenschaften von Programmrepr√§sentationen spezifizieren, um ein bestimmtes Programmverhalten zu selektieren, an dem ein Advice ausgef√ºhrt wird. Dieser Kompositionsmechanismus verursacht ernsthafte Probleme in der Weiterentwicklung von aspektorientierten Programmen. Jede √Ñnderung im Quellcode eines aspektorientierten Programms kann unvorhersehbare Auswirkungen auf das Programmverhalten haben. Diese Unbestimmbarkeit von Auswirkungen einfachster Quellcode√§nderungen erschwert nicht nur die Anwendung von AOP in gro√üen Softwaresystemen, sondern verhindert praktisch den Einsatz bew√§hrter Software Refactoring Werkzeuge zur Verbesserung der Evolutionsf√§higkeit einer Software. Zur L√∂sung dieses Problems wurde in dieser Dissertation eine statische √Ñnderungsauswirkungsanalyse (Change Impact Analysis) f√ºr Pointcuts entwickelt und in ein Refactoringwerkzeug integriert, um damit den Entwicklern aspektorientierter Programme das Refactoring zu erm√∂glichen. Diese Dissertation untersucht systematisch allgemeine Eigenschaften von existierenden Ans√§tzen zur Verhaltenskomposition in AOP, pr√§sentiert eine Klassifikation dieser Eigenschaften und identifiziert die individuellen Auswirkungen auf bekannte Evolutionsprobleme im Kontext von Software Refactoring. Als ein Ergebnis wird die fehlende Verbindung zwischen der Spezifikation der Eigenschaften von Programmrepr√§sentationen und des selektierten Verhaltens als Hauptgrund f√ºr die Evolutionsprobleme herausgestellt. In dem entwickelten Refactoringansatz werden Verfahren zum automatisierten Refactoring, zur statischen √Ñnderungsauswirkungsanalyse und zur qualitativen Programmanalyse integriert. Der werkzeug-unterst√ºtzte Refactoringansatz erm√∂glicht eine automatisierte √úberpr√ºfung der G√ºltigkeit von Pointcuts in aspektorientierten Programmen und im Falle ihrer Invalidierung auch ihre Aktualisierung. Zu diesem Zweck wird ein Pointcut Modell vorgeschlagen, das eine Spezifikation jeder Eigenschaft einer Programmrepr√§sentation durch ein explizites Modellelement darstellt. Basierend auf diesem Modell kann die entwickelte Analyse f√ºr Pointcuts jede einzelne Spezifikation eines referenzierten Elements einer Programmrepr√§sentation ‚Äúvermessen‚Ä? und durch Quellcode√§nderungen invalidierte Spezifikationen identifizieren. Die eigentliche Aktualisierungsentscheidung wird durch qualitative Heuristiken automatisiert ermittelt. Der zus√§tzlich entwickelte Ansatz zur Generierung von Pointcuts erm√∂glicht in vielen F√§llen ein direktes Ersetzten des invalidierten Teils eines Pointcuts und erm√∂glicht damit die Wiedererkennbarkeit aktualisierter Pointcuts, sogar nach mehrfacher Aktualisierung. Der Ansatz wurde mit Hilfe des im Rahmen der Arbeit entwickelten Refactoringwerkzeugs Soothsayer an unterschiedlichen Programmen evaluiert. Dabei hat sich gezeigt, dass die richtigen Aktualisierungsentscheidungen f√ºr ganz unterschiedliche Pointcuts automatisiert getroffen werden k√∂nnen und in vielen F√§llen der invalidierte Teil eines Pointcuts direkt ersetzt werden konnte. Bei der Evaluierung wurde festgestellt, dass folgende Eigenschaften von Pointcutsprachen aktueller AOP Ans√§tze die automatisierte Aktualisierung negativ beeinflussen: - nicht approximierbare Eigenschaften dynamischer Programmrepr√§sentationen, - unvollst√§ndig spezifizierte Eigenschaften einer Programmrepr√§sentation und - die Spezifikation von Eigenschaften ohne Beziehung zum selektierten Programmverhalten. Diese F√§lle k√∂nnen generell durch Programmanalysetechniken nicht gel√∂st werden, weil wichtige Informationen f√ºr die √Ñnderungsauswirkunganalyse nicht im Quellcode vorhanden sind.</dc:description>
          <dc:date>2007-11-20</dc:date>
          <dc:type>doctoralthesis</dc:type>
          <dc:type>doc-type:doctoralthesis</dc:type>
          <dc:format>application/pdf</dc:format>
          <dc:identifier>http://opus4.kobv.de/opus4-tuberlin/frontdoor/index/index/docId/1615</dc:identifier>
          <dc:identifier>urn:nbn:de:kobv:83-opus-16790</dc:identifier>
          <dc:identifier>http://nbn-resolving.de/urn/resolver.pl?urn:nbn:de:kobv:83-opus-16790</dc:identifier>
          <dc:identifier>http://opus4.kobv.de/opus4-tuberlin/files/1615/wloka_jan.pdf</dc:identifier>
          <dc:language>eng</dc:language>
          <dc:rights>Deutsches Urheberrecht mit Print on Demand (u.a. f√ºr Dissertationen empfohlen)</dc:rights>
        </oai_dc:dc>
      </metadata>
    </record>
  </GetRecord>
</OAI-PMH>
