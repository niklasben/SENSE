<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="xsl/oai2.xsl"?><OAI-PMH xmlns="http://www.openarchives.org/OAI/2.0/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/ http://www.openarchives.org/OAI/2.0/OAI-PMH.xsd">
  <responseDate>2014-10-15T06:50:08Z</responseDate>
  <request verb="GetRecord" metadataPrefix="oai_dc" identifier="oai:kobv.de-opus4-tuberlin:1216">http://opus4.kobv.de/opus4-tuberlin/oai</request>
  <GetRecord>
    <record>
      <header>
        <identifier>oai:kobv.de-opus4-tuberlin:1216</identifier>
        <datestamp>2013-07-01</datestamp>
        <setSpec>doc-type:doctoralthesis</setSpec>
        <setSpec>bibliography:false</setSpec>
        <setSpec>ddc</setSpec>
        <setSpec>ddc:004</setSpec>
      </header>
      <metadata>
        <oai_dc:dc xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd">
          <dc:title xml:lang="deu">UML-basierter Klassen- und Integrationstest objektorientierter Programme</dc:title>
          <dc:title xml:lang="eng">UML-Based Class and Integration Testing of Object-Oriented Programs</dc:title>
          <dc:creator>Sokenou, Dehla</dc:creator>
          <dc:subject>ddc:004</dc:subject>
          <dc:description xml:lang="deu">Der Softwaretest ist ein in der Praxis weit verbreitetes Verfahren zur Qualitätssicherung von Software. Das Softwareprodukt wird beim Softwaretest mit einer Menge von Eingabedaten stimuliert und die Ausgaben auf ihre Korrektheit im Hinblick auf die Spezifikation überprüft. Modellbasierte Ansätze zum Softwaretest finden mit der Verbreitung modellbasierter Softwareentwicklung auch in der Domäne der objektorientierten Programme immer mehr an Bedeutung. Das Modell dient in der modellbasierten Softwareentwicklung nicht mehr nur zur Dokumentation der Software, sondern vorrangig zur automatischen Generierung von Software und zur automatischen Ableitung von Testfällen, mit denen das Programm stimuliert wird, und Testorakeln, die Testergebnisse mit erwarteten Ergebnissen vergleichen. In der Dissertation wird eine Technik zur Ableitung von Testfällen und Testorakeln aus UML-Modellen vorgestellt. Anders als viele andere Arbeiten zum UML-basierten Test werden verschiedene UML-Bestandteile und damit verschiedene Sichten auf das zu testende Programm berücksichtigt. Testfälle werden aus einer Kombination von Sequenz- und Zustandsdiagrammen abgeleitet. Die Sequenzdiagramme spezifizieren dabei die Testsequenzen, die Zustandsdiagramme dienen der Initialisierung der Testsequenzen. Testorakel werden durch Kombination von Zustandsdiagrammen und OCL-Constraints erzeugt. Ein weiterer Schwerpunkt der Arbeit ist die Integration des erzeugten Testcodes in die zu testende Software (Instrumentierung) unter Verwendung aspektorientierter Programmiertechniken. Diese erlauben das Hinzufügen und Entfernen von zusätzlichem Code – hier: Testcode –, ohne den Quelltext der bestehenden Software zu ändern. Aspektorientierte Programmiertechniken eignen sich durch diese Eigenschaft besonders gut für die Instrumentierung, da der zusätzliche Testcode meist nur während der Testphase benötigt wird und danach ohne Aufwand wieder entfernt werden kann.</dc:description>
          <dc:description xml:lang="eng">Software testing is a widely used method for software quality assurance. It involves stimulating the software product with a quantity of input data and and checking the correctness of the output with respect to the specification. With the spread of model-based software development, model-based approaches to software testing are also gaining increasing importance in the domain of object-oriented programming. In model-based software development, the model no longer only serves to document the software; its principal function is to automatically generate software and automatically derive test cases to stimulate the program, as well as test oracles to compare the test results with expected results. The present thesis presents a technique for deriving test cases and test oracles from UML models. Unlike much of the other work on UML-based testing, it takes into account different UML components and thus different views of the program under test. Test cases are derived from a combination of sequence and state diagrams. Here, the sequence diagrams specify the test sequences, while the state diagrams are used to initialize them. Test oracles are generated by combining state diagrams with OCL constraints. Another focus of the thesis is integrating the generated test code into the software under test (instrumentation) using aspect-oriented programming techniques. These allow additional code – in this case: test code – to be added or removed without changing the source code of the existing software. This feature makes aspect-oriented programming techniques particularly well suited for instrumentation because in most cases the additional test code is only needed during the test phase and can then be easily removed again.</dc:description>
          <dc:date>2006-03-06</dc:date>
          <dc:type>doctoralthesis</dc:type>
          <dc:type>doc-type:doctoralthesis</dc:type>
          <dc:format>application/pdf</dc:format>
          <dc:identifier>http://opus4.kobv.de/opus4-tuberlin/frontdoor/index/index/docId/1216</dc:identifier>
          <dc:identifier>urn:nbn:de:kobv:83-opus-12392</dc:identifier>
          <dc:identifier>http://nbn-resolving.de/urn/resolver.pl?urn:nbn:de:kobv:83-opus-12392</dc:identifier>
          <dc:identifier>http://opus4.kobv.de/opus4-tuberlin/files/1216/sokenou_dehla.pdf</dc:identifier>
          <dc:language>deu</dc:language>
          <dc:rights>Deutsches Urheberrecht mit Print on Demand (u.a. für Dissertationen empfohlen)</dc:rights>
        </oai_dc:dc>
      </metadata>
    </record>
  </GetRecord>
</OAI-PMH>
