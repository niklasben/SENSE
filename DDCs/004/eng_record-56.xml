<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="xsl/oai2.xsl"?><OAI-PMH xmlns="http://www.openarchives.org/OAI/2.0/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/ http://www.openarchives.org/OAI/2.0/OAI-PMH.xsd">
  <responseDate>2014-10-15T06:44:05Z</responseDate>
  <request verb="GetRecord" metadataPrefix="oai_dc" identifier="oai:kobv.de-opus4-tuberlin:56">http://opus4.kobv.de/opus4-tuberlin/oai</request>
  <GetRecord>
    <record>
      <header>
        <identifier>oai:kobv.de-opus4-tuberlin:56</identifier>
        <datestamp>2013-07-01</datestamp>
        <setSpec>doc-type:doctoralthesis</setSpec>
        <setSpec>bibliography:false</setSpec>
        <setSpec>ddc</setSpec>
        <setSpec>ddc:004</setSpec>
      </header>
      <metadata>
        <oai_dc:dc xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd">
          <dc:title xml:lang="deu">Werkzeuggestützte Entwicklung kooperativer Agenten im Dienstkontext</dc:title>
          <dc:title xml:lang="eng">Development of co-operative Agents in the Context of Telecommunication Services</dc:title>
          <dc:creator>Fricke, Stefan</dc:creator>
          <dc:subject>ddc:004</dc:subject>
          <dc:description xml:lang="deu">Agentenorientierte Techniken (AOT) befassen sich mit der Realisierung verteilter, kommunizierender, selbst-koordinierender Systeme, deren Elemente Software-Agenten sind. Viele Untersuchungsgegenstände und Ziele der AOT finden sich auch in der Welt der Telematikdienste wieder: Hier fordert die Vielzahl von Anbietern und zunehmende Komplexität der Dienste offene Diensteplattformen, auf denen Dienste bereitgestellt und genutzt werden können. Für das Funktionieren solcher Plattformen sind intelligente und flexible Abläufe sowie Kontrollmöglichkeiten notwendig. Diese Arbeit beschreibt die Konzeption und Implementierung einer agentenbasierten Entwicklungsumgebung für diensterbringende Agenten, bestehend aus Agentenprogrammiersprache, Agentenarchitektur und Testbett. Die Programmierung von Agenten findet werkzeugunterstützt mit Hilfe von vier Spezifikationssprachen statt: Dienste werden als Fähigkeiten deklarativ in Form von Tasks und prozedural durch eine modulare Skriptsprache beschrieben; zielgerichtetes Verhalten wird durch die Beschreibung der Intentionalität eines Agenten mittels Motivationen, Zielen und Sensing-Alarms ausgedrückt. Sprechakte dienen für einfache soziale Interaktionen wie Dienstnutzungen; durch rollenbasierter Interaktionsprotokolle lassen sich komplexere Verhandlungen mit mehreren Teilnehmern definieren. Eine im Kern reaktive, komponentenbasierte Agentenarchitektur mit mächtiger Managementfunktionalität bildet das Grundgerüst der generischen Fähigkeiten eines jeden Agenten. In die Architektur sind Features wie thread-parallele Verarbeitung, dynamisches priorisiertes Scheduling, Laufzeitdatenprotokollierung, intelligente Handlungsauswahl, Datenpersistenz und ein einfacher Lernmechanismus integriert. Fehlersituationen werden durch Überwachung von Laufzeitdaten wie Kosten und Zeit schnell erkannt und durch Auswahl alternativer Handlungsskripte oder Ausschreibung des Dienstes an andere Agenten flexibel behandelt. Durch die Architektur wird jeder Agent zu einem flexiblen, koordinierten und kommunizierenden Informationsverarbeiter. Vervollständigt wird die Entwicklungsumgebung durch ein Testbett zum empirischen Testen und Debuggen. Es besteht aus einer Menge graphischer Monitore, die die Abläufe auf der Ebene der Agentenprogrammiersprache sichtbar machen und kontrollierte Eingriffe erlauben. Das Testbett erlaubt sowohl das Debugging einzelner Agenten, die Untersuchung kompletter Szenarien als auch die Generierung und Auswertung von Laufzeitprotokollen.</dc:description>
          <dc:description xml:lang="eng">Agent-oriented techniques aim at the realization of distributed, communicating, and self-coordinating systems on the basis of so-called software agents. Many of the scientific topics apply also to the field of telecommunication applications: The presence of competing service providers as well as the growing complexity of the services being delivered raise the need for open service platforms supporting the creation as well as the delivering of services. Characteristic for such platforms are intelligent and flexible control mechanisms. This thesis describes the design and implementation of a development environment for the realization of agent-based services comprising an agent programming language, agent architecture, and a testbed. The agent programming process is supported by graphical editors on top of four specification languages: Services are specified declaratively by the concept of tasks and procedurally with a modular scripting language; the mental state of an agent constitutes goal-directed behaviour and is described by means of motivations, goals, and sensing alarms. Simple social interactions can be expressed by speech acts whereas rather complex negotiations between several parties are to be specified with a role-based interaction protocol language. A component-based reactive agent architecture enhances an agent with powerful generic management capabilities: Integrated into the architecture are features like thread-parallel execution, dynamic prioritized scheduling, logging of runtime data, intelligent action selection, a persistence mechanism, an a learning facility. The occurence of errors is detected automatically and handled flexible, either by selecting alternative scripts or delegating tasks to other agents. With the architecture´s generic management capabilities agents are flexible, self-coordinating, communicating information processors. Being distributed, autonomous systems, the correctness of agent-based systems is a difficult task to ensure. It is the purpose of the agent testbed to allow empirical testing and debugging. Several monitor applications for the particular aspects of the agent programming language constitute the testbed. With these tools causal relationships inside the agents as well as in an agent society can be monitored, and modified by controlled experimentation. Furthermore, runtime protocols can be generated and evaluated.</dc:description>
          <dc:date>2001-01-10</dc:date>
          <dc:type>doctoralthesis</dc:type>
          <dc:type>doc-type:doctoralthesis</dc:type>
          <dc:format>application/pdf</dc:format>
          <dc:identifier>http://opus4.kobv.de/opus4-tuberlin/frontdoor/index/index/docId/56</dc:identifier>
          <dc:identifier>urn:nbn:de:kobv:83-opus-524</dc:identifier>
          <dc:identifier>http://nbn-resolving.de/urn/resolver.pl?urn:nbn:de:kobv:83-opus-524</dc:identifier>
          <dc:identifier>http://opus4.kobv.de/opus4-tuberlin/files/56/fricke_stefan.pdf</dc:identifier>
          <dc:language>deu</dc:language>
          <dc:rights>Deutsches Urheberrecht mit Print on Demand (u.a. für Dissertationen empfohlen)</dc:rights>
        </oai_dc:dc>
      </metadata>
    </record>
  </GetRecord>
</OAI-PMH>
