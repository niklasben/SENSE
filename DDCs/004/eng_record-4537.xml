<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="xsl/oai2.xsl"?><OAI-PMH xmlns="http://www.openarchives.org/OAI/2.0/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/ http://www.openarchives.org/OAI/2.0/OAI-PMH.xsd">
  <responseDate>2014-10-15T07:02:50Z</responseDate>
  <request verb="GetRecord" metadataPrefix="oai_dc" identifier="oai:kobv.de-opus4-tuberlin:4537">http://opus4.kobv.de/opus4-tuberlin/oai</request>
  <GetRecord>
    <record>
      <header>
        <identifier>oai:kobv.de-opus4-tuberlin:4537</identifier>
        <datestamp>2013-12-19</datestamp>
        <setSpec>doc-type:doctoralthesis</setSpec>
        <setSpec>bibliography:false</setSpec>
        <setSpec>ddc</setSpec>
        <setSpec>ddc:004</setSpec>
      </header>
      <metadata>
        <oai_dc:dc xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd">
          <dc:title xml:lang="deu">Modularisierung und Wiederverwendung durch generische Klassen in Object Teams</dc:title>
          <dc:title xml:lang="eng">Modularization and reuse by generic classes in object teams</dc:title>
          <dc:creator>Mertgen, Andreas</dc:creator>
          <dc:subject>ddc:004</dc:subject>
          <dc:description xml:lang="deu">Modularisierung und Wiederverwendung sind von wesentlicher Bedeutung für die Produktivität in der Softwareentwicklung. Die rollenorientierte Programmierung ergänzt die Konzepte der objektorientierten Programmierung mit dem Ziel, die Modularisierung zu fördern. Die Programmiersprache Object Teams, eine rollenorientierte Erweiterung der Sprache Java, bietet eine gezielte Unterstützung der Modularisierung von Kollaborationen zwischen Objekten. Eine Klasse bzw. ein Objekt kann unterschiedliche Rollen in separaten Kontexten annehmen. Die Abbildung von Rollen und Kontext wird in Object Teams durch spezielle Klassen unterstützt. Eine Rollenklasse definiert dabei eine der Vererbung ähnelnde Beziehung zu einer sogenannten Basisklasse, welche die Rolle spielt. Der Rollenmechanismus erlaubt einerseits eine feinere und flexiblere Modularisierung kontextspezifischer Daten und Funktionen, führt aber andererseits auch zu einer starken Kopplung der beteiligten Klassen und wirkt sich damit negativ auf die Wiederverwendbarkeit aus. Ursache dafür ist die fehlende Möglichkeit zur Abstraktion der Bindung zwischen Rolle und Basis. &#13;
Das Ziel dieser Arbeit ist es, die starke Kopplung zwischen den beteiligten Klassen zu reduzieren und damit deren Flexibilität und deren Wiederverwendbarkeit zu fördern. Als Lösungsansatz werden Mechanismen zur Abstraktion von Klassen eingeführt, mit denen vor allem strukturelle Abhängigkeiten zwischen Rollen- und Basisklassen in generischer Form ausgedrückt werden können. Solche generischen Klassen repräsentieren Templates, die je nach Anwendung, in der sie zum Einsatz kommen, unterschiedlich ausgeprägt werden. Im Quellcode der Klasse können dazu an ausgewählten Punkten Metavariablen anstelle von statischen Definitionen verwendet werden. Die Metavariablen dienen dabei als Platzhalter für spezifische Programmelemente wie Klassen und Methoden und stellen eine Form der Metaprogrammierung dar. Zur konkreten Definition der Metavariablen wird eine deklarative Beschreibungssprache nach Art der logischen Programmierung in Prolog eingeführt. Diese erlaubt es, spezifische Programmelemente anhand ihrer strukturellen Eigenschaften auszuwählen – unabhängig von ihren Bezeichnern. Die Funktionalität einer Rolle kann so in generischer Form definiert werden. Die spezifischen Basisklassen und deren Methoden, die mit der Rolle für eine konkrete Anwendung verknüpft werden sollen, werden automatisch anhand der deklarativen Beschreibung identifiziert. Die konkrete Ausprägung einer generischen Klasse wird für jede Anwendung neu bestimmt, indem Metavariablen in Abhängigkeit vom jeweiligen Kontext durch spezifische Programmelemente ersetzt werden. Im Rahmen der Verarbeitung des Programms werden die generischen Anteile des Codes zu ausführbarem Code transformiert. &#13;
In dieser Arbeit werden zunächst die Probleme von Object Teams hinsichtlich Modularisierung und Wiederverwendbarkeit analysiert. Darauf aufbauend wird dann die neu entwickelte Spracherweiterung Generic Object Teams mit Syntax und Semantik vorgestellt, die Object Teams um die beschriebenen Möglichkeiten zur Metaprogrammierung erweitert. Bestandteil dieser Erweiterung ist die Abbildung und Auswertung des Programms in Prolog. Der Effekt der neuen Sprachmittel auf die Modularisierung und die Wiederverwendbarkeit wird anhand einer Studie zu Entwurfsmuster-Anwendungen evaluiert. &#13;
Die Arbeit zeigt, dass sich die Metaprogrammierung mit Prolog erfolgreich in Object Teams integrieren lässt. Der entwickelte Ansatz wirkt sich einerseits positiv auf die Modularisierung und die Wiederverwendbarkeit aus, führt andererseits aber auch zu einer gesteigerten Komplexität der Programme. Mit der Komplexität steigen gleichermaßen die Anforderungen an den Programmierer, was die Anwendbarkeit des Ansatzes einschränkt. Insgesamt sehen wir in dem Ansatz einen nützlichen Beitrag für die rollenorientierte Programmierung in Object Teams, der auch als Anregung und Grundlage für weitere Entwicklungen in diesem Bereich dienen kann.&#13;
</dc:description>
          <dc:description xml:lang="eng">Modularization and reuse are essential for the productivity of software development. Role-oriented programming complements the concepts of object-oriented programming with the goal to improve modularization. The programming language Object Teams, a role-oriented extension of the Java language, provides specific support for modularization of collaborations between objects. A class or object can play different roles in separate contexts. The realization of roles and context is supported in Object Teams through special classes. A role class defines a relationship, which is similar to inheritance, to a so called base class that plays the role. Roleplaying on the one hand allows a finer and more flexible modularization of context-specific data and functions, but on the other hand also leads to a strong coupling of the classes involved and thus has a negative impact on the reusability. This is due to the inability to abstract the binding between role and base.&#13;
The goal of this work is to reduce the strong coupling between the classes involved and to improve both their flexibility and their reusability. Our approach introduces mechanisms for the abstraction of classes, which primarily allow expressing structural dependencies between role and base classes in a generic form. Such generic classes represent templates that are transformed depending on the specific application in which they are used. Metavariables can be used instead of static definitions in selected positions of the source code of the class. Metavariables represent placeholders for specific program elements such as classes and methods and provide a form of metaprogramming. A declarative description language, which is similar to logic programming in Prolog, is introduced for the specific definition of the metavariables. This allows the programmer to select specific program elements based on their structural properties – regardless of their identifiers. This way the function of a role may be defined in a generic form. The specific base classes and their methods that are to be bound to the role for a specific application are automatically identified based on the declarative description. The concrete form of a generic class is created for each new application by replacing the metavariables with specific program elements, depending on the respective context. As part of the compilation process of the program, the generic elements will be transformed into executable code. In this work we analyze the problems of Object Teams regarding modularization and reusability. Based on the analysis, the newly developed language extension Generic Object Teams, which extends Object Teams to include the options described for metaprogramming, is presented with syntax and semantics. The extension includes the mapping and evaluation of the program in Prolog. The effect on the modularization and reusability of the new language features will be evaluated with a study of design pattern applications.&#13;
This work shows that metaprogramming in Prolog can be successfully integrated into Object Teams. The developed approach improves the modularization and reusability, but also leads to an increased complexity of programs. The complexity raises the demands on the programmer and therefore limits the applicability of the approach. In summary, we consider the approach a useful contribution for role-oriented programming in Object Teams, which can serve as an inspiration and a basis for further developments in this area.&#13;
</dc:description>
          <dc:date>2013-12-16</dc:date>
          <dc:type>doctoralthesis</dc:type>
          <dc:type>doc-type:doctoralthesis</dc:type>
          <dc:format>application/pdf</dc:format>
          <dc:identifier>http://opus4.kobv.de/opus4-tuberlin/frontdoor/index/index/docId/4537</dc:identifier>
          <dc:identifier>urn:nbn:de:kobv:83-opus4-45373</dc:identifier>
          <dc:identifier>http://nbn-resolving.de/urn/resolver.pl?urn:nbn:de:kobv:83-opus4-45373</dc:identifier>
          <dc:identifier>http://opus4.kobv.de/opus4-tuberlin/files/4537/mertgen_andreas.pdf</dc:identifier>
          <dc:language>deu</dc:language>
          <dc:rights>Deutsches Urheberrecht mit Print on Demand (u.a. für Dissertationen empfohlen)</dc:rights>
        </oai_dc:dc>
      </metadata>
    </record>
  </GetRecord>
</OAI-PMH>
