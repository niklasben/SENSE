<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="xsl/oai2.xsl"?><OAI-PMH xmlns="http://www.openarchives.org/OAI/2.0/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/ http://www.openarchives.org/OAI/2.0/OAI-PMH.xsd">
  <responseDate>2014-10-15T07:00:22Z</responseDate>
  <request verb="GetRecord" metadataPrefix="oai_dc" identifier="oai:kobv.de-opus4-tuberlin:3477">http://opus4.kobv.de/opus4-tuberlin/oai</request>
  <GetRecord>
    <record>
      <header>
        <identifier>oai:kobv.de-opus4-tuberlin:3477</identifier>
        <datestamp>2013-07-02</datestamp>
        <setSpec>doc-type:doctoralthesis</setSpec>
        <setSpec>bibliography:false</setSpec>
        <setSpec>ddc</setSpec>
        <setSpec>ddc:004</setSpec>
      </header>
      <metadata>
        <oai_dc:dc xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd">
          <dc:title xml:lang="eng">Extending the Object Teams Programming Model into Distributed Environments</dc:title>
          <dc:title xml:lang="deu">Ausdehnung der Object Teams durch Modell-Programmierung in verteilten Umwelten</dc:title>
          <dc:creator>Al-Zaghameem, Abdullah Odeh</dc:creator>
          <dc:subject>ddc:004</dc:subject>
          <dc:description xml:lang="eng">The growing complexity of distributed applications, as well as changes in their execution environments, demands for applications that are more adaptable and easier to compose and evolve. Often such distributed applications are required to adapt during run-time, which calls for dynamically adaptable distributed applications. The dynamic adaptation of distributed application objects is the process of enabling these objects to change their behaviors dynamically at runtime as a response to changes in their execution environment. Lately, the Aspect-Oriented Programming (AOP) technique has been employed in distributed programming due to its prosperity to improve applications‚Äô modularity. It allows separating those crosscutting concerns that are tangled and/or scattered in application code, and capturing them in aspect modules. For this purpose, several distributed AOP approaches like AWED, JAC, etc. have been developed. These approaches enable application objects to adapt through replacing their methods with new code segments called advices at specific points designated by remote pointcuts. From an AOP perspective, the dynamic adaptation of distributed applications requires weaving aspects dynamically at runtime. The current distributed AOP models lack for supporting consistent dynamic aspects weaving. Besides, in these approaches there is no explicit representation of the context in which aspects are applied, which reduces their expressivity to specify in a clear and understandable manner how distributed applications can adapt and when? In addition, application developers do not have the proper mechanisms to control the effects of aspects on application base objects dynamically; because most of these approaches do not allow aspect instances to be accessed explicitly. Object Teams is a programming model that implements the collaboration-based (role-based) design for the object-oriented languages. It employs the AOP concepts to separate the crosscutting collaborations within application objects: it captures collaborations in modules called ‚Äúteams‚Ä?, and the participation of application objects inside these teams within ‚Äúrole‚Ä? modules. In this research, we map the fundamentals of the Object Teams model to distributed environments to improve the modularity of adaptable distributed applications. Through employing the expressive ‚ÄúplayedBy‚Ä? relationship in distributed applications, we enhance the modularity of distributed collaborative applications, and support distributed aspects at runtime. The dissertation introduces a new programming concept called the Remote Role Playing (RRP), which aims at enabling the objects of distributed applications to play different roles dynamically at runtime and remotely from any application node. This will provide a modular and expressive technique for realizing the dynamic adaptation of distributed applications. The Distributed Object Teams for Java (DOT/J) framework is introduced as an implementation of the RRP by extending the OT/J (the language that implements the OT model for Java language). DOT/J augments the OT/J infrastructure with the DOT/J Transformation Library (DTL), and establishes the DOT/J Runtime System (DRS) to facilitate the RRP between distributed objects and roles. The dissertation demonstrated the capability of RRP to improve dynamic adaptation, and realized other sub-goals like improving distributed aspects‚Äô modularity and expressiveness. The approach has been evaluated in a set of case studies, and compared to counterpart distributed-AOP approaches. Finally, the dissertation discussed some future works and further DOT/J enhancements.</dc:description>
          <dc:description xml:lang="deu">Die zunehmende Komplexit√§t verteilter Anwendungen sowie ver√§nderte Ausf√ºhrungsumgebungen erfordern Anwendungen, die leichter adaptiert, kombiniert und weiterentwickelt werden k√∂nnen. H√§ufig m√ºssen derartige verteilte Anwendungen auch zur Laufzeit adaptiert werden, es werden somit dynamisch adaptierbare, verteilte Anwendungen ben√∂tigt. Die dynamische Adaptierbarkeit der Objekte einer verteilten Anwendung bedeutet, diese Objekte in die Lage zu versetzen, ihr Verhalten in Abh√§ngigkeit von √Ñnderungen ihrer Ausf√ºhrungsumgebung zur Laufzeit dynamisch zu ver√§ndern. Als ein vielversprechendes Mittel zur Verbesserung der Modularit√§t von Anwendungen wurde in letzter Zeit das Konzept der Aspektorientierten Programmierung (AOP) auch im Bereich der Programmierung verteilter Anwendungen eingesetzt. Es erlaubt querschnittliche Funktionalit√§ten (sog. crosscutting concerns), die an einer Vielzahl von Stellen im Programmcode auftreten, herauszul√∂sen und zusammenh√§ngend in separaten Aspektmodulen zu definieren. Hierzu wurden eine Reihe von verteilten AOP-Ans√§tzen entwickelt, wie zum Beispiel AWED und JAC. Diese Ans√§tze erlauben die Adaptierung von Objekten der Anwendung durch Austausch ihrer Methoden mit neuen Code-Segmenten, den sog. advices, an bestimmten, durch sog. remote pointcuts definierten Stellen. Aus Sicht der AOP erfordert die dynamische Adaptierung verteilter Anwendungen ein dynamisches Einweben von Aspekten zur Laufzeit. Die derzeitigen Ans√§tze zur verteilen AOP bieten jedoch keine Unterst√ºtzung f√ºr ein konsistentes dynamisches Weben von Aspekten. Au√üerdem gibt es in diesen Ans√§tzen keine explizite Repr√§sentation des Kontextes, in dem Aspekte angewendet werden. Dies erschwert eine klare und verst√§ndliche Beschreibung, wie und wann eine verteilte Anwendungen adaptiert wird. Dar√ºber hinaus geben sie den Entwicklern keine geeigneten Mechanismen an die Hand, um die Auswirkungen von Aspekten auf die Basisobjekte der Anwendung dynamisch zu steuern, da die meisten dieser Ans√§tze keinen expliziten Zugang zu Aspektinstanzen erlauben. Object Teams ist ein Programmiermodell, welches den kollaborationsbasierten (rollenbasierten) Entwurf in objektorientierten Sprachen bereitstellt. Es verwendet die AOP-Konzepte um querschnittliche Kollaborationen in Anwendungsobjekten zu separieren: es fa√üt Kollaborationen in Modulen zusammen, die als ‚ÄûTeams‚Äú bezeichnet werden, und beschreibt die Teilnahme von Anwendungsobjekten innerhalb dieser Teams in ‚ÄûRollenmodulen‚Äú. In dieser Dissertation werden die grundlegenden Konzepte von Object Teams auf verteilte Anwendungen √ºbertragen um die Modularit√§t adaptierbarer verteilter Anwendungen zu verbessern. Durch Verwendung der ausdrucksm√§chtigen ‚ÄûplayedBy‚Äú-Beziehung in verteilten Anwendungen wird die Modularit√§t verteilter, kollaborativer Anwendungen verbessert und verteilte Aspekte zur Laufzeit unterst√ºtzt. Die vorliegende Forschungsarbeit f√ºhrt ein neues Konzept mit dem Namen Remote Role Playing (RRP) ein. Dies erlaubt es den Objekten einer verteilten Anwendung zur Laufzeit dynamisch verschiedene Rollen innerhalb der Kollaborationen von Object Teams einzunehmen, und dies von jedem beliebigen ‚Äì auch von entfernten ‚Äì Ausf√ºhrungsknoten aus. Hiermit steht eine modulare und ausdrucksm√§chtige Technik zur dynamischen Anpassung verteilter Anwendungen zur Verf√ºgung. Es wird das Distributed Object Teams for Java (DOT/J) Framework vorgestellt, das die bestehende Sprache OT/J (die Implementierung des Object Teams-Programmiermodells in Java) um RRP erweitert: hierzu wurde die Infrastruktur von OT/J um die DOT/J Transformation Library (DTL) erg√§nzt und das DOT/J Runtime System (DRS) bereitgestellt, um das RRP zwischen verteilten Objekten und Rollen zu vereinfachen. In der Arbeit wird die Effektivit√§t des RRP zur Verbesserung einer dynamischen Adaptierbarkeit verteilter Anwendungen demonstriert und es werden eine Reihe weiterer Vorteile aufgezeigt, wie die Verbesserung der Modularit√§t und Ausdrucksm√§chtigkeit verteilter Aspekte. Der Ansatz wurde im Rahmen mehrerer Fallstudien evaluiert und mit anderen Ans√§tzen zum verteilten AOP verglichen. Abschlie√üend werden M√∂glichkeiten f√ºr zuk√ºnftige Arbeiten und Erweiterungen von DOT/J aufgezeigt.</dc:description>
          <dc:date>2012-10-08</dc:date>
          <dc:type>doctoralthesis</dc:type>
          <dc:type>doc-type:doctoralthesis</dc:type>
          <dc:format>application/pdf</dc:format>
          <dc:identifier>http://opus4.kobv.de/opus4-tuberlin/frontdoor/index/index/docId/3477</dc:identifier>
          <dc:identifier>urn:nbn:de:kobv:83-opus-36893</dc:identifier>
          <dc:identifier>http://nbn-resolving.de/urn/resolver.pl?urn:nbn:de:kobv:83-opus-36893</dc:identifier>
          <dc:identifier>http://opus4.kobv.de/opus4-tuberlin/files/3477/alzaghameem_abdullah.pdf</dc:identifier>
          <dc:language>eng</dc:language>
          <dc:rights>Deutsches Urheberrecht mit Print on Demand (u.a. f√ºr Dissertationen empfohlen)</dc:rights>
        </oai_dc:dc>
      </metadata>
    </record>
  </GetRecord>
</OAI-PMH>
