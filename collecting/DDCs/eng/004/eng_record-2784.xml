<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="xsl/oai2.xsl"?><OAI-PMH xmlns="http://www.openarchives.org/OAI/2.0/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/ http://www.openarchives.org/OAI/2.0/OAI-PMH.xsd">
  <responseDate>2014-10-15T06:57:05Z</responseDate>
  <request verb="GetRecord" metadataPrefix="oai_dc" identifier="oai:kobv.de-opus4-tuberlin:2784">http://opus4.kobv.de/opus4-tuberlin/oai</request>
  <GetRecord>
    <record>
      <header>
        <identifier>oai:kobv.de-opus4-tuberlin:2784</identifier>
        <datestamp>2013-07-01</datestamp>
        <setSpec>doc-type:doctoralthesis</setSpec>
        <setSpec>bibliography:false</setSpec>
        <setSpec>ddc</setSpec>
        <setSpec>ddc:004</setSpec>
      </header>
      <metadata>
        <oai_dc:dc xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd">
          <dc:title xml:lang="eng">Resource Management and Performance Control for Staged Design-Based Services</dc:title>
          <dc:title xml:lang="deu">Betriebsmittelverwaltung und Leistungsregelung f√ºr Dienstgeber mit Flie√übandstruktur.</dc:title>
          <dc:creator>Al-Hakeem, Mohammad Shadi</dc:creator>
          <dc:subject>ddc:004</dc:subject>
          <dc:description xml:lang="eng">The staged architecture has emerged as an approach to implement highly concurrent Internet services. Staging means that the functionality of the server code is broken down into computational stages with each stage performing some aspect of request processing. A client request would then be processed along a pipeline of these stages. This architecture allows services to behave well and to gracefully handle overload, in addition to increase code modularity and to simplify service design. However, staged architecture has introduced other design challenges related to resource management and performance control. A bottleneck stage in the work-flow of request processing will limit the overall system throughput even though other stages are isolated from this bottleneck stage and can support a higher performance. For this reason care must be taken to avoid bottlenecks. A solution to adjust the throughput is to allocate more resources to a stage if it is becoming a bottleneck. This in turn may force other stages into becoming a bottleneck. Since all stages are competing for the same resources additional effects may take place and give rise to instability or oscillations. Staged design was originally introduced as a programming abstraction to improve memory accesses behavior of highly concurrent Internet servers by implementing cohort scheduling policies which batch the execution of requests at each stage. As a result existing scheduling policies in staged design-based applications are mechanisms to increase the benefit from cache locality within the individual stages, rather than to balance resource allocation to avoid bottleneck stages and control the system performance. Consequently, dynamic changes in stages' requirements lead to instability and oscillations in performance under different load conditions. In addition, achieving a target performance in such systems is a hard job and often depends on manual parameter tuning by expert administrators or benchmarks experiments. To address these challenges, this thesis suggests a three-layer control architecture for resource management and performance control of staged applications based on the Staged Event Driven Architecture (SEDA), which is the state of the art of the staged design. Then an adaptive resource allocation policy and a performance control approach are presented, which follow this three-layer control architecture. The proposed approach benefits from the advantages of SEDA to support highly concurrent demands and makes use of feedback-based controllers to manage the system resources and control its performance. The resource controller allocates resources to stages depending on run time observations of the stages' load and performance, and the feedback based performance controller adapts system parameters to achieve performance targets and guarantees the desired quality of service. We validate the proposed scheduling policy and compare it with other scheduling policies under different load conditions through a simulation study. Results demonstrate that our approach can allocate system resources automatically and dynamically to achieve a superior performance while avoiding performance degradation under overload. We demonstrate also the ability of the performance controller to adjust the system at run-time dynamically and automatically to maintain the desired performance target under a variety of dynamic changes in the system.</dc:description>
          <dc:description xml:lang="deu">Die Staged-Architektur ist als ein Ansatz f√ºr Internet-Dienste mit hoher Nebenl√§ufigkeit entwickelt worden. ‚ÄúStaging‚Ä? bedeutet dabei, dass die Funktionalit√§t des Dienstes in einzelne Stufen zerlegt wird, die jeweils einige Aspekte der Berechnung ausf√ºhren. Eine Client-Anfrage wird dann entlang einer Pipeline dieser Stufen bearbeitet. Diese Architektur erm√∂glicht es dem Dienst, mit √úberlast situationen umzugehen und erh√∂ht zudem die Modularit√§t des Codes und vereinfacht das Design. Allerdings haben sich mit Einf√ºhrung der Staged-Architektur neue Herausforderungen im Design ergeben hinsichtlich der Ressourcenverwaltung und der Performance-Steuerung. Eine Engpass-Phase innerhalb des Verarbeitungsflusses der Anfragen reduziert den Gesamtdurchsatz selbst dann, wenn andere Stufen von dieser Engpass-Phase isoliert sind und eine h√∂here Leistung erm√∂glichen w√ºrden. Aus diesem Grund muss beim Design sorgsam darauf geachtet werden, Engp√§sse zu vermeiden. Eine m√∂gliche L√∂sung ist es, der Engpass-Stufe mehr Ressourcen zuzuweisen. Dies kann allerdings dazu f√ºhren, dass wiederum andere Stufen zum Engpass werden. Da alle Stufen um die gleichen Ressourcen konkurrieren, k√∂nnen zus√§tzliche √úberlagerungen auftreten, die zu Instabilit√§t oder einem Aufschwingen f√ºhren k√∂nnen. Das Staged Design wurde urspr√ºnglich vorgestellt als eine Programmierungsabstraktion zur Verbesserung des Speicherzugriffsverhaltens von hochgradig nebenl√§ufigen Internet-Servern durch die Umsetzung von "Cohort Scheduling"- Ans√§tzen, die die Ausf√ºhrung von Anfragen der einzelnen Stufen b√ºndeln. Damit sind die bestehenden Ans√§tze des Schedulings im Staged Design mehr darauf ausgelegt, die Vorteile der Cache-Lokalit√§t innerhalb der Stufen zu nutzen als durch geeignete Ressourcenzuteilung zwischen den Stufen zu schaffen und Engp√§sse zu vermeiden. Folglich f√ºhren dynamische Ver√§nderungen in den Anforderungen der Stufen zu Instabilit√§t und Schwingungen unter verschiedenen Lastbedingungen. Weiterhin ist es kompliziert, in solchen Systemen eine vorgegebene Performance zu erreichen ‚Äì dies basiert h√§ufig auf manuellem Tuning der Parameter durch Experten oder anhand der Ergebnisse aufwendiger Benchmarks. Um diesen Herausforderungen zu begegnen, schl√§gt diese Arbeit eine Drei-Schichtenarchitektur f√ºr Ressourcen Management und Performance Regelung von Anwendungen vor, die auf der Stage Event Driven Architecture (SEDA, aktuelle Variante des Staged Design) basieren. Es werden eine adaptive Ressourcen zuweisung und ein Ansatz zur Performance-Regelung vorgestellt, die dieser Drei-Schichtenarchitektur folgen. Der vorgeschlagene Ansatz profitiert von den Vorteilen der SEDA zur Unterst√ºtzung massiv nebenl√§ufiger Nachfragen und nutzt eine Feedback-basierte Regelung zur Verwaltung der System-Ressourcen und der Steuerung der Leistung. Der Ressourcen-Controller weist die Ressourcen den einzelnen Stufen in Abh√§ngigkeit von zur Laufzeit beobachteter Last und Performance zu. Der Feedback-basierte Performance-Controller passt die Systemparameter dynamisch an, um Performance-Ziele zu garantieren sowie die gew√ºnschte Dienstqualit√§t zu erreichen. Der vorgeschlagene Scheduling-Ansatz wird validiert und mit anderen Ans√§tzen unter verschiedenen Lastbedingungen mittels einer Simulation vergleichen. Die Ergebnisse zeigen, dass der Ansatz Ressourcen dynamisch zuweisen kann und eine h√∂here Performance erreichen kann, w√§hrend ein Absinken der Performance unter √úberlast vermieden wird. Weiterhin wird die F√§higkeit des Performance-Controller demonstriert, die Systemparameter zur Laufzeit dynamisch und automatisch anzupassen, um das gew√ºnschte Performanceziel auch unter einer Vielzahl dynamischer Ver√§nderungen im System zu erreichen.</dc:description>
          <dc:date>2011-02-09</dc:date>
          <dc:type>doctoralthesis</dc:type>
          <dc:type>doc-type:doctoralthesis</dc:type>
          <dc:format>application/pdf</dc:format>
          <dc:identifier>http://opus4.kobv.de/opus4-tuberlin/frontdoor/index/index/docId/2784</dc:identifier>
          <dc:identifier>urn:nbn:de:kobv:83-opus-28877</dc:identifier>
          <dc:identifier>http://nbn-resolving.de/urn/resolver.pl?urn:nbn:de:kobv:83-opus-28877</dc:identifier>
          <dc:identifier>http://opus4.kobv.de/opus4-tuberlin/files/2784/alhakeem_mohammad.pdf</dc:identifier>
          <dc:language>eng</dc:language>
          <dc:rights>Deutsches Urheberrecht mit Print on Demand (u.a. f√ºr Dissertationen empfohlen)</dc:rights>
        </oai_dc:dc>
      </metadata>
    </record>
  </GetRecord>
</OAI-PMH>
